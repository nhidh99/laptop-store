buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyManagementVersion}"
    }
}

apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group 'org.example'
version '1.0.0'

repositories {
    mavenCentral()
}

jar {
    manifest {
        attributes 'Main-Class': 'org.example.LaptopStoreApplication'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

dependencies {
    implementation project(':controller')
    implementation project(':config')
    implementation "org.springdoc:springdoc-openapi-ui:${openApiVersion}"
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    dependencies {
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation "org.projectlombok:lombok:${lombokVersion}"
        implementation "org.apache.commons:commons-lang3:3.11"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        implementation "org.springframework.boot:spring-boot-starter-data-redis"
        implementation "org.springframework.boot:spring-boot-starter-security"
        implementation "org.springframework.boot:spring-boot-starter-validation"
        implementation "org.springframework.boot:spring-boot-starter-mail"
        implementation "org.springframework.boot:spring-boot-starter-freemarker"
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-webflux"
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    bootJar {
        enabled = false
    }

    jar {
        enabled = true
    }
}

configure(subprojects.findAll { it.name != 'constant' }) {
    dependencies {
        implementation project(':constant')
    }
}

configure(subprojects.findAll { it.name != 'util' && it.name != 'constant' }) {
    dependencies {
        implementation project(':util')
    }
}